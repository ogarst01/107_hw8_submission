clear
close all

n = 10;

% for plotting the unit circle in pole zero plots: 
r = 1;
th = 0:pi/50:2*pi;
xunit = r * cos(th);
yunit = r * sin(th);

% get diagonally dominant matrix:
randMat = diagonallyDominantMaker(n);

% chose some b matrix (doesn't matter what it starts from)
b = randn(n,1);

% calculated the Atildat and Btilda for the Jacobi algorithm:
A = randMat;
[V, M] = eig(A)
D = diag(A);

eyeN = ones(n,n);
T = eyeN.*(D)

% get M matrix: diagonal values on the diagonal:
M = T.*eye(n);

% calculate the Jacobi tran
Atil = inv(M)*(M-A);
Btil = inv(M);

numIter = 100;

x = randn(n,1);

% define the number of iterations it goes through:
for cnt1 = 1:(numIter - 1)
    x(:,cnt1+1) = Atil*x(:,cnt1) + inv(M)*b;
    err(cnt1) = norm(x(:,cnt1) - inv(A)*b);
end

str = sprintf('Jacobi method for diagonal dominant n = %g and %g iterations',n, numIter);

figure,
hold on
for i = 1:n
    plot(real(x(i,:)))
end
title(str)
xlabel('iteration')
ylabel('error')
hold off

str2 = sprintf('Jacobi method error for diagonal dominant n = %g and %g iterations',n, numIter);

figure,
plot(err)
title(str2)
xlabel('iteration')
ylabel('error')

% (iv): relaxation of constraints:

alpha = [0.1,0.5,0.9];

for i = 1:3
    for cnt1 = 1:(numIter - 1)
        x(:,cnt1+1) = (1-alpha(i))*(x(:,cnt1)) + alpha(i)*(Atil*x(:,cnt1) + inv(M)*b);
        err(cnt1) = norm(x(:,cnt1) - inv(A)*b);
    end
    
    % some string manipulation:
    str3 = sprintf('Jacobi method for diagonally \n dominant relaxed w/ alpha = %g', alpha(i));
    
    figure,
    hold on
    for j = 1:n
        plot(real(x(j,:)))
    end
    title(str3)
    xlabel('iteration')
    ylabel('value')
    hold off
    
    str4 = sprintf('Jacobi method error for diagonally \n dominant relaxed state system with alpha = %g', alpha(i));

    figure,
    plot(err)
    title(str4)
    xlabel('iteration')
    ylabel('error')

end

%%
A = randMat;

eigenVals = eig(A);

limitAxis = max(eigenVals);

figure,
hold on
plot(eigenVals,'o')
h = plot(xunit, yunit);
xlim([-limitAxis,limitAxis])
ylim([-limitAxis, limitAxis])
xlabel('Real')
ylabel('Imaginary')
title('pole zero plot for Jacobi with\n diagonally dominant matrix')
hold off


%% generate symmetric positive definite matrices:

% easiest example: 0 matrix with diagonal as all positive values:
zeromat = zeros(n,n);

% add real values numbers: 
ranMat2 = rand(n);

% dot multiply to get only values on diag:
symmPosDef = ranMat2.*(eye(n));

b = randn(n,1);

% calculated the Atildat and Btilda for the Jacobi algorithm:
A = symmPosDef;
[V, M] = eig(A)
D = diag(A);

eyeN = ones(n,n);
T = eyeN.*(D)

% get M matrix: diagonal values on the diagonal:
M = T.*eye(n);

% calculate the Jacobi tran
Atil = inv(M)*(M-A);
Btil = inv(M);

numIter = 100;

x = randn(n,1);
% define the number of iterations it goes through:
for cnt1 = 1:(numIter - 1)
    x(:,cnt1+1) = Atil*x(:,cnt1) + inv(M)*b;
    err(cnt1) = norm(x(:,cnt1) - inv(A)*b);
end

figure,
hold on
for i = 1:n
    plot(real(x(i,:)))
end
hold off

figure,
plot(err)
title('residual error')

% (iv): relaxation of constraints:

alpha = [0.1,0.5,0.9];

for i = 1:length(alpha)
    clear str1

    for cnt1 = 1:(numIter - 1)
        x(:,cnt1+1) = (1-alpha(i))*(x(:,cnt1)) + alpha(i)*(Atil*x(:,cnt1) + inv(M)*b);
        err(cnt1) = norm(x(:,cnt1) - inv(A)*b);
    end
    
    % some string manipulation:
    str1 = sprintf('relaxed state system with alpha = %g', alpha(i));
    
    figure,
    hold on
    for i = 1:n
        plot(real(x(i,:)))
    end
    title(str1)
    hold off
    
    figure,
    plot(err)
    title('residual error')
    
    clear str
    delete str
end

%%

eigenVals = eig(A);
limitAxis = max(eigenVals);

figure,
hold on
plot(eigenVals,'o')
h = plot(xunit, yunit);
xlim([-limitAxis,limitAxis])
ylim([-limitAxis, limitAxis])
xlabel('Real')
ylabel('Imaginary')
title('pole zero plot for Jacobi with\n diagonally dominant matrix')

figure,
hold on
plot(eigenVals,'o')
% ezplot(@(x,y) (x-x0).^2 + (y-y0).^2 -r^2)
xlabel('Real')
ylabel('Imaginary')
hold off
